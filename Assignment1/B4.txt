------------------------------------
B-4 Common Subexpression Elimination
------------------------------------

        Here  is  a  small  program   to  observe  the  optimization  of  Common
        Subexpression Elimination (CSE) or Full Redundancy Elimination (FRE). In
        the  following program  observe  that the  term "a  +  c" appears  twice
        (albeit differently)  and thus can be  calculated once and the  value is
        used next  time when  needed (the redundant  calculation second  time is
        eliminated, thus the term CSE/FRE).

        You must demand -O2 for CSE/FRE.

        Source file : B-4.c
        Compilation : gcc-4.7.2 -c -O2 -fdump-tree-all B-4.c
        View result : vi -O B-4.c.*.ssa B-4.c.*.fre1
        Clear dumps : rm -f B-4.c.* B-4.o

Program
-------

        int main()
        {
            int a, b, c;
            b = (a + c + b) * (c + a);
            return b;
        }


Questions
---------

        1   How many  times is the expression  (a + c) computed  in the original
            code (as seen in the SSA pass)? What about after the FRE pass?
Answer- In the SSA pass or original execution a+c is computed 2 times - in a+c and a+c+b.
        the FRE pass was able to  reuse the  temporary variable which  stored the  result of  the
        intitial computation  of (a +  c). Hence it had only 1 computation but used 1 extra temporary 
        variable.     
            
        2   Have  there been  any more  optimizations  after FRE?  How will  you
            check?
Answer-  Check  the   file  B-4.c.*.optimized for optimisations.
         If  it is same as the output  of FRE, then no optimizations have occured.
           
        3   Why did  we have  to put a  "return b" in  this assignment?  What if
            "return b" is changed to "return 0"? Will it make any difference?
Answer- "return  b" was  required to  make the  computation of  variable `b'
            meaningful in FRE pass. If function`main' is going to "return 0"  and there is
            no other  output, GCC  will realise that  the entire  computation of
            variable `b' was not required and would have eliminated it in the optimised code.
